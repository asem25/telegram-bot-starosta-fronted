package ru.semavin.bot.service.schedules;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;
import ru.semavin.bot.dto.ScheduleDTO;
import ru.semavin.bot.service.MessageSenderService;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduleService {

    private final ScheduleApiService scheduleApiService;
    private final MessageSenderService messageSenderService;

    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    public Mono<Void> getForToday(Long chatId, String groupName) {
        return scheduleApiService.getForToday(groupName)
                .flatMap(schedule -> sendSchedule(chatId, schedule, "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
                .doOnError(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {}", e.getMessage());
                    messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è");
                })
                .onErrorResume(e -> Mono.empty());
    }

    public Mono<Void> getForCurrentWeek(Long chatId, String groupName) {
        return scheduleApiService.getForCurrentWeek(groupName)
                .flatMap(schedule -> sendSchedule(chatId, schedule, "–Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"))
                .doOnError(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {}", e.getMessage());
                    messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é");
                })
                .onErrorResume(e -> Mono.empty());
    }

    public Mono<Void> getForSomeWeek(Long chatId, String groupName, int week) {
        return scheduleApiService.getForSomeWeek(groupName, week)
                .flatMap(schedule -> sendSchedule(chatId, schedule, "–Ω–∞ –Ω–µ–¥–µ–ª—é ‚Ññ" + week))
                .doOnError(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Ññ{}: {}", week, e.getMessage());
                    messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Ññ" + week);
                })
                .onErrorResume(e -> Mono.empty());
    }

    public Mono<Void> getForSomeDate(Long chatId, String groupName, LocalDate date) {
        String formattedDate = date.format(formatter);
        return scheduleApiService.getForSomeDate(formattedDate, groupName)
                .flatMap(schedule -> sendSchedule(chatId, schedule, "–Ω–∞ –¥–∞—Ç—É " + formattedDate))
                .doOnError(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {}: {}", formattedDate, e.getMessage());
                    messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " + formattedDate);
                })
                .onErrorResume(e -> Mono.empty());
    }

    private Mono<Void> sendSchedule(Long chatId, List<ScheduleDTO> schedule, String label) {
        if (schedule == null || schedule.isEmpty()) {
            return messageSenderService.sendMessage(chatId, "–ù–∞ " + label + " –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç").then();
        }
        StringBuilder sb = new StringBuilder("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ " + label + ":\n\n");
        for (ScheduleDTO dto : schedule) {
            sb.append(String.format("üìò %s (%s)\n%s ‚Äì %s | –ê—É–¥: %s\nüë®‚Äçüè´ %s\n\n",
                    dto.getSubjectName(),
                    dto.getLessonType(),
                    dto.getStartTime(),
                    dto.getEndTime(),
                    dto.getClassroom(),
                    dto.getTeacherName()));
        }
        return messageSenderService.sendMessage(chatId, sb.toString()).then();
    }
}