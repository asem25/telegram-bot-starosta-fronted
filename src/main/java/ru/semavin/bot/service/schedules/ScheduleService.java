package ru.semavin.bot.service.schedules;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;
import ru.semavin.bot.dto.ScheduleDTO;
import ru.semavin.bot.service.MessageSenderService;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduleService {

    private final ScheduleApiService scheduleApiService;
    private final MessageSenderService messageSenderService;

    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    public Mono<String> getForToday(String groupName) {
        String formattedDate = LocalDate.now().format(formatter);
        return scheduleApiService.getForSomeDate(formattedDate, groupName)
                .map(schedule -> buildScheduleTextForDay(schedule, formattedDate))
                .onErrorResume(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {}: {}", formattedDate, e.getMessage());
                    return Mono.just("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " + formattedDate);
                });
    }

    public Mono<String> getForCurrentWeek(String groupName) {
        String formattedDate = LocalDate.now().format(formatter);
        return scheduleApiService.getForCurrentWeek(groupName)
                .map(schedule -> buildScheduleTextForWeek(schedule, formattedDate, formattedDate))
                .onErrorResume(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {}: {}", formattedDate, e.getMessage());
                    return Mono.just("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " + formattedDate);
                });
    }

    public Mono<String> getForSomeWeek(String groupName, int week) {
        String formattedDate = LocalDate.now().format(formatter);
        return scheduleApiService.getForSomeWeek(groupName, week)
                .map(schedule -> buildScheduleTextForWeek(schedule, formattedDate, formattedDate))
                .onErrorResume(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {}: {}", formattedDate, e.getMessage());
                    return Mono.just("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " + formattedDate);
                });
    }

    //TODO –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ API(–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫)
    public Mono<String> getScheduleSomeDate(String groupName, LocalDate date) {
        String formattedDate = date.format(formatter);
        return scheduleApiService.getForSomeDate(formattedDate, groupName)
                .map(schedule -> buildScheduleTextForDay(schedule, formattedDate))
                .onErrorResume(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {}: {}", formattedDate, e.getMessage());
                    return Mono.just("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " + formattedDate);
                });
    }

    private String buildScheduleTextForDay(List<ScheduleDTO> schedule, String formattedDate) {
        if (schedule == null || schedule.isEmpty()) {
            return "üìÖ –ù–∞ " + formattedDate + " –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç";
        }
        StringBuilder sb = new StringBuilder("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + formattedDate + ":\n\n");
        for (ScheduleDTO dto : schedule) {
            sb.append(String.format("üìò %s (%s)\n%s ‚Äì %s | –ê—É–¥: %s\nüë®‚Äçüè´ %s\n\n",
                    dto.getSubjectName(),
                    dto.getLessonType(),
                    dto.getStartTime(),
                    dto.getEndTime(),
                    dto.getClassroom(),
                    dto.getTeacherName()));
        }
        return sb.toString();
    }
    private String buildScheduleTextForWeek(List<ScheduleDTO> schedule,
                                            String localDateStartWeek,
                                            String localDateEndWeek) {

        StringBuilder sb = new StringBuilder("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é: " + localDateStartWeek + " - " + localDateEndWeek + " :\n\n");
        for (ScheduleDTO dto : schedule) {
            sb.append(String.format("%s \nüìò %s (%s)\n%s ‚Äì %s | –ê—É–¥: %s\nüë®‚Äçüè´ %s\n\n",
                    dto.getLessonDate().getDayOfWeek(),
                    dto.getSubjectName(),
                    dto.getLessonType(),
                    dto.getStartTime(),
                    dto.getEndTime(),
                    dto.getClassroom(),
                    dto.getTeacherName()));
        }
        return sb.toString();
    }

}