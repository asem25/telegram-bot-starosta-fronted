package ru.semavin.bot.service.schedules;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.semavin.bot.dto.ScheduleDTO;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduleService {

    private final ScheduleApiService scheduleApiService;

    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    public CompletableFuture<String> getForToday(String groupName) {
        String formattedDate = LocalDate.now().format(formatter);
        return scheduleApiService.getForSomeDate(formattedDate, groupName)
                .thenApply(schedule -> buildScheduleTextForDay(schedule, formattedDate))
                .exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {}: {}", formattedDate, e.getMessage());
                    return "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " + formattedDate;
                });
    }

    public CompletableFuture<String> getForCurrentWeek(String groupName) {
        String formattedDate = LocalDate.now().format(formatter);
        return scheduleApiService.getForCurrentWeek(groupName)
                .thenApply(schedule -> buildScheduleTextForWeek(schedule, formattedDate, formattedDate))
                .exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é {}: {}", formattedDate, e.getMessage());
                    return "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –æ—Ç " + formattedDate;
                });
    }

    public CompletableFuture<String> getForSomeWeek(String groupName, int week) {
        String formattedDate = LocalDate.now().format(formatter);
        return scheduleApiService.getForSomeWeek(groupName, week)
                .thenApply(schedule -> buildScheduleTextForWeek(schedule, formattedDate, formattedDate))
                .exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é {}: {}", formattedDate, e.getMessage());
                    return "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –æ—Ç " + formattedDate;
                });
    }

    public CompletableFuture<ScheduleDTO> findLesson(String groupName, LocalDate date, String startTime){
        String formattedDate = date.format(formatter);
        return scheduleApiService.findLesson(groupName, formattedDate, startTime);
    }

    public CompletableFuture<String> getScheduleSomeDate(String groupName, LocalDate date) {
        String formattedDate = date.format(formatter);
        return scheduleApiService.getForSomeDate(formattedDate, groupName)
                .thenApply(schedule -> buildScheduleTextForDay(schedule, formattedDate))
                .exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {}: {}", formattedDate, e.getMessage());
                    return "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " + formattedDate;
                });
    }

    public CompletableFuture<List<ScheduleDTO>> getScheduleSomeDateWithOutText(String groupName, LocalDate date) {
        String formattedDate = date.format(formatter);
        return scheduleApiService.getForSomeDate(formattedDate, groupName);
    }

    private String buildScheduleTextForDay(List<ScheduleDTO> schedule, String formattedDate) {
        if (schedule == null || schedule.isEmpty()) {
            return "üìÖ –ù–∞ " + formattedDate + " –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç";
        }
        StringBuilder sb = new StringBuilder("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + formattedDate + ":\n\n");
        for (ScheduleDTO dto : schedule) {
            sb.append(String.format("üìò %s (%s)\n%s ‚Äì %s | –ê—É–¥: %s\nüë®‚Äçüè´ %s\n%s\n",
                    dto.getSubjectName(),
                    getStringForLessonType(dto.getLessonType()),
                    dto.getStartTime(),
                    dto.getEndTime(),
                    dto.getClassroom(),
                    (dto.getTeacherName().contains("–ù–µ —É–∫–∞–∑–∞–Ω") ? dto.getTeacherName().substring(0, 9) : dto.getTeacherName()),
                    (dto.getDescription() != null && !dto.getDescription().isEmpty()) ? String.format("‚ùì –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n", dto.getDescription()) :
                    ""));
        }
        return sb.toString();
    }

    private String getStringForLessonType(String lessonType){
        return switch (lessonType) {
            case "LECTURE" -> "–õ–ö";
            case "PRACTICAL" -> "–ü–ó";
            case "EXAM" -> "–≠–∫–∑–∞–º–µ–Ω";
            case "LAB" -> "–õ–†";
            default -> lessonType;
        };
    }
    private String buildScheduleTextForWeek(List<ScheduleDTO> schedule,
                                            String localDateStartWeek,
                                            String localDateEndWeek) {

        StringBuilder sb = new StringBuilder("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é: " + localDateStartWeek + " - " + localDateEndWeek + " :\n\n");
        for (ScheduleDTO dto : schedule) {
            sb.append(String.format("%s \nüìò %s (%s)\n%s ‚Äì %s | –ê—É–¥: %s\nüë®‚Äçüè´ %s\n\n",
                    dto.getLessonDate().getDayOfWeek(),
                    dto.getSubjectName(),
                    dto.getLessonType(),
                    dto.getStartTime(),
                    dto.getEndTime(),
                    dto.getClassroom(),
                    dto.getTeacherName()));
        }
        return sb.toString();
    }
}
