package ru.semavin.bot.service.notification;

import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.semavin.bot.dto.SkipNotificationDTO;
import ru.semavin.bot.dto.UserDTO;
import ru.semavin.bot.service.MessageSenderService;
import ru.semavin.bot.service.groups.GroupService;
import ru.semavin.bot.util.KeyboardUtils;

import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

@RequiredArgsConstructor
@Service
@Slf4j
public class SkipNotificationService {
    private final MessageSenderService messageSenderService;
    private final GroupService groupService;
    private final NotificationApiService notificationApiService;

    private final Map<String, List<SkipNotificationDTO>> notificationsByGroup = new ConcurrentHashMap<>();
    @Data

    public static class MissedResponse {
        private String text;
        private InlineKeyboardMarkup markup;
    }
    public void notifyStarosta(SkipNotificationDTO dto) {
        String group = dto.getGroupName();
        String link = "https://t.me/" + dto.getUsername();
        String decription = dto.getDescription();


        String period = dto.getFromDate().equals(dto.getToDate())
                ? dto.getFromDate().toString()
                : dto.getFromDate() + " ‚Äî " + dto.getToDate();

        String message = String.format("""
                ‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç [%s](%s) –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏:
                –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—â—É?: %s
                üìÖ %s
                """, dto.getUsername(), link, decription,period);

        groupService.getStarosta(group).thenAccept(optStarosta -> {
            if (optStarosta.isPresent()) {
                UserDTO starosta = optStarosta.get();
                Long chatId = starosta.getTelegramId();
                if (chatId != null) {
                    messageSenderService.sendMessageWithMarkDown(chatId, message);
                } else {
                    log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: chatId —Å—Ç–∞—Ä–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω");
                }
            } else {
                log.warn("–í –≥—Ä—É–ø–ø–µ {} –Ω–µ—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", group);
            }
        });
        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–∏—Å
        dto.setUuid(UUID.randomUUID());
        notificationApiService.sendSkipNotification(dto);
    }
    @Async
    public CompletableFuture<Void> deleteSkip(String uuid) {
        return
                notificationApiService.deleteSkipNotification(UUID.fromString(uuid));
    }

    @Async
    public CompletableFuture<String> formatGroupAbsences(String groupName, List<SkipNotificationDTO> absences) {
        if (absences == null || absences.isEmpty()) {
            return CompletableFuture.completedFuture("‚úâÔ∏è –í –≥—Ä—É–ø–ø–µ *" + groupName + "* –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö.");
        }

        StringBuilder sb = new StringBuilder();
        sb.append("\uD83D\uDCC5 –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –≥—Ä—É–ø–ø–µ *").append(groupName).append("*:\n\n");

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");

        for (SkipNotificationDTO dto : absences) {
            String from = dto.getFromDate().format(formatter);
            String to = dto.getToDate().format(formatter);
            String range = from.equals(to) ? from : from + " - " + to;
            String link = dto.getUsername() != null ? "https://t.me/" + dto.getUsername() : "[–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω]";

            sb.append("\u2022 [@")
                    .append(dto.getUsername())
                    .append("](").append(link).append(") ‚Äî ")
                    .append(range);

            if (dto.getDescription() != null && !dto.getDescription().isBlank()) {
                sb.append(" ‚Äî _").append(dto.getDescription().strip()).append("_");
            }

            sb.append("\n");
        }

        return CompletableFuture.completedFuture(sb.toString());
    }

    public CompletableFuture<MissedResponse> formatGroupAbsencesWithKeyboard(String groupName) {
        // 1) –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤–æ –≤–Ω–µ—à–Ω–µ–º API
        return notificationApiService.getAllNotification(groupName) // CF<List<SkipNotificationDTO>>
                // 2) –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤ ‚Äì –≤—ã–∑—ã–≤–∞–µ–º formatGroupAbsences
                .thenCompose(skipList -> {
                    // formatGroupAbsences(...) –≤–µ—Ä–Ω—ë—Ç CF<String>
                    CompletableFuture<String> textFuture = formatGroupAbsences(groupName, skipList);

                    // –æ–±—ä–µ–¥–∏–Ω—è–µ–º:
                    return textFuture.thenApply(text -> {
                        // —Ñ–æ—Ä–º–∏—Ä—É–µ–º MissedResponse
                        MissedResponse response = new MissedResponse();
                        response.setText(text);

                        // –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–æ–∏–º –∏–∑ skipList
                        InlineKeyboardMarkup markup = KeyboardUtils.buildMissedInlineKeyboard(skipList);
                        response.setMarkup(markup);
                        return response;
                    });
                })
                // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                .exceptionally(ex -> {
                    log.error("–û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {}", ex.getMessage());
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º MissedResponse —Å —Ç–µ–∫—Å—Ç–æ–º –æ–± –æ—à–∏–±–∫–µ
                    MissedResponse fallback = new MissedResponse();
                    fallback.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤");
                    fallback.setMarkup(null);
                    return fallback;
                });
    }
}
