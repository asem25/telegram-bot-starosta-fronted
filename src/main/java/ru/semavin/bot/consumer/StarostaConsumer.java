package ru.semavin.bot.consumer;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.message.MaybeInaccessibleMessage;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.semavin.bot.dto.UserDTO;
import ru.semavin.bot.enums.RegistrationStep;
import ru.semavin.bot.service.*;
import ru.semavin.bot.service.schedules.ScheduleService;
import ru.semavin.bot.service.users.profile.ProfileEditingService;
import ru.semavin.bot.service.users.profile.ProfileService;
import ru.semavin.bot.service.users.register.RegistrationStateService;
import ru.semavin.bot.service.users.register.UserRegistrationService;
import ru.semavin.bot.service.users.UserService;
import ru.semavin.bot.util.CalendarUtils;
import ru.semavin.bot.util.KeyboardUtils;
import ru.semavin.bot.util.exceptions.UserNotFoundException;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;

@Slf4j
@Component
@RequiredArgsConstructor
public class StarostaConsumer implements LongPollingUpdateConsumer {

    private final RegistrationStateService stateService;
    private final MessageSenderService messageSenderService;
    private final UserService userService;
    private final UserRegistrationService userRegistrationService;
    private final ProfileEditingService profileEditingService;
    private final ProfileService profileService;
    private final ScheduleService scheduleService;
    private final ExecutorService executorService;

    @Override
    public void consume(List<Update> updates) {
        List<Update> stepUpdates = new ArrayList<>();
        List<Update> normalUpdates = new ArrayList<>();

        for (Update update : updates) {
            Long chatId = getChatId(update);
            if (inRegistrationOrEdit(chatId)) {
                stepUpdates.add(update);
            } else {
                normalUpdates.add(update);
            }
        }

        stepUpdates.forEach(this::processSingleUpdate);

        normalUpdates.forEach(update ->
                executorService.submit(() -> processSingleUpdate(update))
        );
    }

    private boolean inRegistrationOrEdit(Long chatId) {
        return stateService.getStep(chatId) != RegistrationStep.NONE || profileEditingService.isEditing(chatId);
    }

    private Long getChatId(Update update) {
        if (update.hasMessage() && update.getMessage() != null) {
            return update.getMessage().getChatId();
        } else if (update.hasCallbackQuery()) {
            return update.getCallbackQuery().getMessage().getChatId();
        }
        return -1L;
    }

    private void processSingleUpdate(Update update) {
        if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        } else if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage());
        }
    }

    private void handleMessage(Message message) {
        String text = message.getText();
        Long chatId = message.getChatId();
        org.telegram.telegrambots.meta.api.objects.User from = message.getFrom();

        log.info("Message received: {}", text);

        // 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if (stateService.getStep(chatId) != RegistrationStep.NONE) {
            userRegistrationService.processStep(chatId, text);
            return;
        }

        // 2) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
        if (profileEditingService.isEditing(chatId)) {
            profileEditingService.processEditStep(chatId, text);
            return;
        }

        switch (text.trim()) {
            case "/start" -> {
                userService.getUserForTelegramTag(from.getUserName())
                        .thenCompose(userDTO -> getStartedAndCheck(chatId, from))
                        .exceptionally(ex -> {
                            if (ex.getCause().getCause() instanceof UserNotFoundException) {
                                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {}", from.getUserName());
                                messageSenderService.sendTextMessage(chatId, "–í –ø–µ—Ä–≤—ã–π —Ä–∞–∑? –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è!");
                                userRegistrationService.startRegistration(chatId, from.getId(), from);
                            } else {
                                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", ex.getMessage());
                                messageSenderService.sendTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                            }
                            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –∑–∞–≤–µ—Ä—à–∞—è —Ü–µ–ø–æ—á–∫—É
                        });
            }
            case "–ü—Ä–æ—Ñ–∏–ª—å" ->
                    messageSenderService.sendButtonMessage(KeyboardUtils.createMessageMainMenu(chatId));

            case "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ->
                    messageSenderService.sendTextMessage(chatId, "–ü–æ–∫–∞ —Ä–∞–∑–¥–µ–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω...");

            case "–ü–æ–º–æ—â—å" ->
                    messageSenderService.sendTextMessage(chatId, "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...");

            case "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ" ->
                    profileService.viewProfile(chatId, from.getUserName());

            case "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" -> {
                messageSenderService.sendTextMessage(chatId, "–ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'");
                profileEditingService.startEditingProfile(chatId, from.getUserName());
            }

            case "–ù–∞–∑–∞–¥" -> {
                userService.getUserForTelegramTag(from.getUserName()).thenAccept(user -> {
                    if (isStarosta(user)) {
                        messageSenderService.sendButtonMessage(KeyboardUtils.createMessageStarostaMainMenu(chatId));
                    } else {
                        messageSenderService.sendButtonMessage(KeyboardUtils.createMessageBackMenu(chatId));
                    }
                }).exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '–ù–∞–∑–∞–¥': {}", e.getMessage());
                    messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã");
                    return null;
                });
            }

            case "–°—Ç–∞—Ä–æ—Å—Ç–∞" -> {
                userService.getUserForTelegramTag(from.getUserName()).thenAccept(user -> {
                    if (isStarosta(user)) {
                        messageSenderService.sendButtonMessage(KeyboardUtils.createMessageWithStarostaMenu(chatId));
                    } else {
                        messageSenderService.sendTextMessage(chatId, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –í—ã –Ω–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞!");
                    }
                }).exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã: {}", e.getMessage());
                    messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã");
                    return null;
                });
            }

            case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" ->
                    messageSenderService.sendButtonMessage(KeyboardUtils.createMessageScheduleMenu(chatId));

            case "–°–µ–≥–æ–¥–Ω—è" -> {
                userService.getUserForTelegramTag(from.getUserName())
                        .thenCompose(user -> scheduleService.getForToday(user.getGroupName()))
                        .thenCompose(schedule -> messageSenderService.sendButtonMessage(
                                SendMessage.builder()
                                        .chatId(chatId)
                                        .text(schedule)
                                        .replyMarkup(KeyboardUtils.createMarkupWithTomorrow(LocalDate.now()))
                                        .build()
                        ))
                        .exceptionally(e -> {
                            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {}", e.getMessage());
                            messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
                            return null;
                        });
            }

            case "–ù–∞ –Ω–µ–¥–µ–ª—é" -> {
                int neededWeek = CalendarUtils.getRelativeWeekNumber(LocalDate.now());

                messageSenderService.sendButtonMessage(
                        SendMessage.builder()
                                .chatId(chatId)
                                .text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:")
                                .replyMarkup(CalendarUtils.buildWeekMessage(neededWeek))
                                .build()
                );
            }

            case "–ù–µ–¥–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É" -> {
                messageSenderService.sendButtonMessage(
                        SendMessage.builder()
                                .chatId(chatId)
                                .text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:")
                                .replyMarkup(CalendarUtils.buildMonthsMarkup())
                                .build()
                );
            }
            case "–î–µ–Ω—å –ø–æ –¥–∞—Ç–µ" -> {
                LocalDate now = LocalDate.now();
                messageSenderService.sendButtonMessage(
                        KeyboardUtils.createMessageWithInlineCalendar(chatId, now.getYear(), now.getMonthValue())
                );
            }

            default ->
                    messageSenderService.sendTextMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start.");
        }
    }

    private CompletableFuture<Void> getStartedAndCheck(Long chatId, User from) {
        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return userService.getUserForTelegramTag(from.getUserName())
                .thenCompose(userDTO -> {
                    if (isStarosta(userDTO)) {
                        return messageSenderService.sendButtonMessage(
                                KeyboardUtils.createHelloMessageAndStarostaMainMenu(chatId)
                        );
                    } else {
                        return messageSenderService.sendButtonMessage(
                                KeyboardUtils.createHelloMessageAndMainMenu(chatId)
                        );
                    }
                })

                .thenAccept(resp -> {
                    // –∑–¥–µ—Å—å –æ–±—ã—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –º–µ—Ç–æ–¥ Void
                    log.info("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", from.getUserName());
                })
                .exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ /start: {}", e.getMessage(), e);
                    messageSenderService.sendTextMessage(chatId, "–ö–∞–∫–∞—è —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞:/");
                    return null;
                });

    }

    private void handleCallback(CallbackQuery callbackQuery) {
        MaybeInaccessibleMessage maybeMsg = callbackQuery.getMessage();
        String data = callbackQuery.getData();
        log.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {}", data);

        if (maybeMsg == null) {
            log.warn("–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —á–∞—Ç—É, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
            return;
        }

        Long chatId = maybeMsg.getChat().getId();
        Integer messageId = maybeMsg.getMessageId();
        String username = callbackQuery.getFrom().getUserName();

        if ("REG_START".equals(data)) {
            userRegistrationService.startRegistration(chatId, callbackQuery.getFrom().getId(), callbackQuery.getFrom());
            return;
        }

        if (data.startsWith("CALENDAR_DATE_")) {
            LocalDate selectedDate = CalendarUtils.parseDateFromCallback(data);
            if (selectedDate == null) {
                messageSenderService.sendTextMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É.");
                return;
            }

            CalendarUtils.rememberMonthForUser(callbackQuery.getFrom().getId(), YearMonth.from(selectedDate));

            userService.getUserForTelegramTag(username)
                    .thenCompose(user -> scheduleService.getScheduleSomeDate(user.getGroupName(), selectedDate))
                    .thenCompose(scheduleText ->
                            messageSenderService.editMessageText(
                                    KeyboardUtils.createEditMessage(
                                            chatId.toString(),
                                            messageId,
                                            scheduleText,
                                            KeyboardUtils.createMarkupWithBackToCalendarButton()
                                    )
                            )
                    )
                    .exceptionally(e -> {
                        log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CALENDAR_DATE_: {}", e.getMessage());
                        messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
                        return null;
                    });

            return;
        }

        if (data.startsWith("CALENDAR_NAV_")) {
            String[] parts = data.split("_");
            int year = Integer.parseInt(parts[2]);
            int month = Integer.parseInt(parts[3]);


            InlineKeyboardMarkup calendar = CalendarUtils.buildCalendarKeyboard(year, month);
            messageSenderService.editCalendarMarkup(chatId, messageId, calendar)
                    .exceptionally(e -> {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {}", e.getMessage());
                        return null;
                    });
            return;
        }

        if ("CALENDAR_BACK".equals(data)) {
            LocalDate now = LocalDate.now();
            SendMessage calendarMessage = KeyboardUtils.createMessageWithInlineCalendar(chatId, now.getYear(),
                    CalendarUtils.getUserMonthOrDefault(callbackQuery.getFrom().getId()).getMonthValue());


            messageSenderService.editMessageText(
                    KeyboardUtils.createEditMessage(
                            chatId.toString(),
                            messageId,
                            calendarMessage.getText(),
                            (InlineKeyboardMarkup) calendarMessage.getReplyMarkup()
                    )
            ).exceptionally(e -> {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {}", e.getMessage());
                return null;
            });

            return;
        }

        if (data.startsWith("SHOW_DAY_")) {
            LocalDate date = LocalDate.parse(data.replace("SHOW_DAY_", ""));

            userService.getUserForTelegramTag(username)
                    .thenCompose(user -> scheduleService.getScheduleSomeDate(user.getGroupName(), date))
                    .thenCompose(scheduleText ->
                            messageSenderService.editMessageText(
                                    KeyboardUtils.createEditMessage(
                                            chatId.toString(),
                                            messageId,
                                            scheduleText,
                                            KeyboardUtils.createBackToWeekMarkup(date.with(DayOfWeek.MONDAY))
                                    )
                            )
                    ).exceptionally(e -> {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–Ω—è: {}", e.getMessage());
                        messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å.");
                        return null;
                    });

            return;
        }

        if (data.startsWith("BACK_WEEK_")) {
            int neededWeek = CalendarUtils.getRelativeWeekNumber(LocalDate.now());

            messageSenderService.editMessageText(
                    KeyboardUtils.createEditMessage(
                            chatId.toString(),
                            messageId,
                            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
                            CalendarUtils.buildWeekMessage(neededWeek)
                    )
            ).exceptionally(e -> {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–µ–¥–µ–ª–µ: {}", e.getMessage());
                return null;
            });

            return;
        }

        if (data.startsWith("TOMORROW_")) {
            LocalDate tomorrow = LocalDate.parse(data.replace("TOMORROW_", ""));

            userService.getUserForTelegramTag(username)
                    .thenCompose(user -> scheduleService.getScheduleSomeDate(user.getGroupName(), tomorrow))
                    .thenCompose(scheduleText ->
                            messageSenderService.editMessageText(
                                    KeyboardUtils.createEditMessage(
                                            chatId.toString(),
                                            messageId,
                                            scheduleText,
                                            KeyboardUtils.createMarkupWithBackToToday(tomorrow.minusDays(1))
                                    )
                            )
                    ).exceptionally(e -> {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è: {}", e.getMessage());
                        messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞.");
                        return null;
                    });

            return;
        }

        if (data.startsWith("BACK_TO_TODAY_")) {
            LocalDate today = LocalDate.parse(data.replace("BACK_TO_TODAY_", ""));

            userService.getUserForTelegramTag(username)
                    .thenCompose(user -> scheduleService.getScheduleSomeDate(user.getGroupName(), today))
                    .thenCompose(scheduleText ->
                            messageSenderService.editMessageText(
                                    KeyboardUtils.createEditMessage(
                                            chatId.toString(),
                                            messageId,
                                            scheduleText,
                                            KeyboardUtils.createMarkupWithTomorrow(today)
                                    )
                            )
                    ).exceptionally(e -> {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é: {}", e.getMessage());
                        messageSenderService.sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.");
                        return null;
                    });
        }
        if (data.equals("BACK_WEEKS")) {
            YearMonth currentMonth = YearMonth.now();
            messageSenderService.editMessageText(
                    KeyboardUtils.createEditMessage(
                            chatId.toString(),
                            messageId,
                            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –º–µ—Å—è—Ü–∞:",
                            CalendarUtils.buildWeeksMarkupForMonth(currentMonth)
                    )
            );
            return;
        }
        if (data.startsWith("MONTH_")) {
            YearMonth month = YearMonth.parse(data.replace("MONTH_", ""));
            messageSenderService.editMessageText(
                    KeyboardUtils.createEditMessage(
                            chatId.toString(),
                            messageId,
                            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –º–µ—Å—è—Ü–∞:",
                            CalendarUtils.buildWeeksMarkupForMonth(month)
                    )
            );
            return;
        }

        if (data.equals("BACK_MONTHS")) {
            messageSenderService.editMessageText(
                    KeyboardUtils.createEditMessage(
                            chatId.toString(),
                            messageId,
                            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                            CalendarUtils.buildMonthsMarkup()
                    )
            );
            return;
        }
        if (data.startsWith("WEEK_")){
            int neededWeek = Integer.parseInt(data.substring("WEEK_".length()));

            messageSenderService.editMessageText(
                    KeyboardUtils.createEditMessage(
                            chatId.toString(),
                            messageId,
                            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
                            CalendarUtils.buildWeekMessageWithBack(neededWeek)
                    )
            ).exceptionally(e -> {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–µ–¥–µ–ª–µ: {}", e.getMessage());
                return null;
            });
        }
    }


    private boolean isStarosta(UserDTO user) {
        return user != null && "STAROSTA".equalsIgnoreCase(user.getRole());
    }

    private List<LocalDate> getWeekDates(LocalDate startDate) {
        List<LocalDate> dates = new ArrayList<>();
        LocalDate monday = startDate.with(DayOfWeek.MONDAY);
        for (int i = 0; i < 6; i++) {
            dates.add(monday.plusDays(i));
        }
        return dates;
    }
}
