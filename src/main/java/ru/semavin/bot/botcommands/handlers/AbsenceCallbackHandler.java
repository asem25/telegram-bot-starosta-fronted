package ru.semavin.bot.botcommands.handlers;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.semavin.bot.dto.SkipNotificationDTO;
import ru.semavin.bot.service.MessageSenderService;
import ru.semavin.bot.service.users.UserService;
import ru.semavin.bot.util.KeyboardUtils;
import ru.semavin.bot.util.calendar.AbsenceCalendarContextService;
import ru.semavin.bot.util.calendar.CalendarUtils;

import java.time.LocalDate;
import java.time.YearMonth;
import java.util.Optional;

import static ru.semavin.bot.util.KeyboardUtils.buildCalendarWithConfirm;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback'–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –∑–∞–Ω—è—Ç–∏–π:
 * - ABSENCE_DATE_... (–≤—ã–±–æ—Ä –¥–∞—Ç—ã)
 * - NAV_ABSENCE_... (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
 * - ABSENCE_CONFIRM / ABSENCE_CANCEL
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AbsenceCallbackHandler {

    private final UserService userService;
    private final MessageSenderService messageSenderService;
    private final AbsenceCalendarContextService absenceCalendarContextService;

    public void handleAbsenceCallback(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        String username = callbackQuery.getFrom().getUserName();
        Long userId = callbackQuery.getFrom().getId();

        // 1) –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
        if (data.startsWith("NAV_ABSENCE_")) {
            handleAbsenceNav(data, chatId, messageId);
            return;
        }

        // 2) –í—ã–±–æ—Ä –¥–∞—Ç—ã
        if (data.startsWith("ABSENCE_DATE_")) {
            handleAbsenceDate(data, chatId, messageId, userId, username);
            return;
        }

        // 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if (data.equals("ABSENCE_CONFIRM")) {
            handleAbsenceConfirm(chatId, userId);
            return;
        }

        // 4) –û—Ç–º–µ–Ω–∞
        if (data.equals("ABSENCE_CANCEL")) {
            handleAbsenceCancel(chatId, userId);
            return;
        }
    }

    private void handleAbsenceNav(String data, Long chatId, Integer messageId) {
        // –ü—Ä–∏–º–µ—Ä: NAV_ABSENCE_2025_04
        String[] parts = data.split("_"); // [NAV, ABSENCE, YYYY, MM]
        int year = Integer.parseInt(parts[2]);
        int month = Integer.parseInt(parts[3]);

        InlineKeyboardMarkup calendar = CalendarUtils.buildAbsenceCalendar(year, month);
        messageSenderService.editCalendarMarkup(chatId, messageId, calendar)
                .exceptionally(e -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ absenceCalendar: {}", e.getMessage());
                    return null;
                });
    }

    private void handleAbsenceDate(String data, Long chatId, Integer messageId, Long userId, String username) {
        LocalDate selectedDate = CalendarUtils.parseDateFromCallback(data);


        userService.getUserForTelegramTag(username).thenAccept(user -> {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º username, groupName –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            absenceCalendarContextService.setUserContext(userId, user.getUsername(), user.getGroupName());

            // –¢–µ–∫—É—â–∏–π draft
            Optional<SkipNotificationDTO> optDraft = absenceCalendarContextService.getDraft(userId);
            SkipNotificationDTO draft = optDraft.orElseGet(() -> {
                SkipNotificationDTO d = new SkipNotificationDTO();
                absenceCalendarContextService.setDraft(userId, d);
                return d;
            });

            // –ó–∞–ø–æ–ª–Ω—è–µ–º from/to
            LocalDate from = draft.getFromDate();
            LocalDate to   = draft.getToDate();

            // –ï—Å–ª–∏ from –Ω–µ—Ç -> —ç—Ç–æ –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞
            if (from == null) {
                from = selectedDate;
                to   = selectedDate;
            } else {
                // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å from, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç to –∏–ª–∏ —Ö–æ—Ç–∏–º –æ–±–Ω–æ–≤–∏—Ç—å to
                // –£–ø–æ—Ä—è–¥–æ—á–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω
                LocalDate min = from.isBefore(selectedDate) ? from : selectedDate;
                LocalDate max = from.isBefore(selectedDate) ? selectedDate : from;
                from = min;
                to   = max;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º
            draft.setFromDate(from);
            draft.setToDate(to);

            // –¢–µ–∫—Å—Ç: ¬´–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω c ... –ø–æ ...¬ª (–∏–ª–∏ –µ—Å–ª–∏ from == to, –∑–Ω–∞—á–∏—Ç 1 –¥–µ–Ω—å)
            String text = String.format("""
                üóì –¢–µ–∫—É—â–∏–π –ø—Ä–æ–ø—É—Å–∫:
                –° %s –ø–æ %s

                –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.
                """,
                    from, to
            );

            // –î–µ–ª–∞–µ–º inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (–∏–ª–∏ —Ç–æ–≥–æ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è `to`):
            YearMonth ym = YearMonth.from(to);
            InlineKeyboardMarkup calendarWithConfirm = buildCalendarWithConfirm(ym, from, to);

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messageSenderService.editMessageText(
                    KeyboardUtils.createEditMessage(
                            chatId.toString(),
                            messageId,
                            text,
                            calendarWithConfirm
                    )
            ).exceptionally(ex -> {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {}", ex.getMessage());
                return null;
            });
        });
        return;
    }

    private void handleAbsenceConfirm(Long chatId, Long userId) {
        if (absenceCalendarContextService.isReadyToConfirm(userId)) {
            messageSenderService.sendTextMessage(chatId,
                    "‚úèÔ∏è –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ?");
        } else {
            messageSenderService.sendTextMessage(chatId,
                    "‚ö†Ô∏è –í—ã–±–æ—Ä –Ω–µ–ø–æ–ª–Ω—ã–π. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—â—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.");
            absenceCalendarContextService.clear(userId);
        }
    }

    private void handleAbsenceCancel(Long chatId, Long userId) {
        absenceCalendarContextService.clear(userId);
        messageSenderService.sendTextMessage(chatId,
                "‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—â—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.");
    }
}